I"ò<p>Strings are amongst the most popular types in Python. We can create them simply by enclosing characters in quotes and
assign a multiline string to a variable by using three quotes.</p>

<pre><code class="language-python3">
# Example 1

&gt;&gt;&gt; a = "Hello"
&gt;&gt;&gt; print(a)
Hello

# Using three double quotes

&gt;&gt;&gt; a = """Lorem ipsum dolor sit amet,
&gt;&gt;&gt; consectetur adipiscing elit,
&gt;&gt;&gt; sed do eiusmod tempor incididunt
&gt;&gt;&gt; ut labore et dolore magna aliqua."""
&gt;&gt;&gt; print(a)

Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua.

</code></pre>

<h2 id="accessing-characters-in-a-stringslice-operator--indexing">Accessing characters in a string(Slice Operator &amp; Indexing)</h2>

<p>We can access individual characters using of a string using slicing. Index starts from 0.</p>

<ul>
  <li>Trying to access a character out of index range will raise an <code class="language-plaintext highlighter-rouge">IndexError</code>.</li>
  <li>The index must be an integer. We canâ€™t use floats or other types, this will result into <code class="language-plaintext highlighter-rouge">TypeError</code>.</li>
</ul>

<p>Python allows negative indexing for its sequences.</p>

<ul>
  <li>The index of <code class="language-plaintext highlighter-rouge">-1</code> refers to the last item, <code class="language-plaintext highlighter-rouge">-2</code> to the second last item and so on.</li>
  <li>We can access a range of items in a string by using the slicing operator <code class="language-plaintext highlighter-rouge">:(colon)</code>.</li>
</ul>

<pre><code class="language-python3">
# Example 1

str = "apple"

str[1] = a
str[-1] = e
str[1:5] = pple
str[2:-1] = pl

</code></pre>

<p>Strings are immutable. This means that elements of a string cannot be changed once they have been assigned. We can simply reassign different strings to the same name.</p>

<pre><code class="language-python3">&gt;&gt;&gt; my_string = 'apple'
&gt;&gt;&gt; my_string[5] = 'a'
...
TypeError: 'str' object does not support item assignment
&gt;&gt;&gt; my_string = 'Python'
&gt;&gt;&gt; my_string
'Python'
</code></pre>

<p>We cannot delete or remove characters from a string. But deleting the string entirely is possible using the <code class="language-plaintext highlighter-rouge">del</code> keyword.</p>

<pre><code class="language-python3">
&gt;&gt;&gt; del my_string[1]
...
TypeError: 'str' object doesn't support item deletion
&gt;&gt;&gt; del my_string
&gt;&gt;&gt; my_string
...
NameError: name 'my_string' is not defined
</code></pre>

<h2 id="looping-through-a-string">Looping Through a String</h2>

<p>strings are arrays, we can loop through the characters in a string, with a for loop.</p>

<pre><code class="language-python3">&gt;&gt;&gt; for x in "banana":
...  print(x)
banana
</code></pre>

<h2 id="check-string">Check String</h2>

<p>To check if a certain phrase or character is present in a string, we can use the keyword <code class="language-plaintext highlighter-rouge">in</code>.</p>

<pre><code class="language-python3">
&gt;&gt;&gt; txt = "The best things in life are free!"
&gt;&gt;&gt; if "free" in txt:
...     print("Yes, 'free' is present.")
Yes, 'free' is present.

</code></pre>

<h2 id="check-if-not">Check if NOT</h2>

<p>We can check if a certain phrase or character is NOT present in a string, we can use the keyword <code class="language-plaintext highlighter-rouge">not in</code>.</p>

<pre><code class="language-python3">
&gt;&gt;&gt; txt = "The best things in life are free!"
&gt;&gt;&gt; if "expensive" not in txt:
...     print("Yes, 'expensive' is NOT present.")
Yes, 'expensive' is NOT present.
</code></pre>

<h1 id="concatenation">Concatenation</h1>

<p>concatenate, or combine, two strings you can use the + operator.</p>

<pre><code class="language-python3">
&gt;&gt;&gt; a = "Hello"
&gt;&gt;&gt; b = "World"
&gt;&gt;&gt; c = a + b
&gt;&gt;&gt; print(c)
Hello World

# To add a space between them, add a " "

&gt;&gt;&gt; c = a + " " + b
&gt;&gt;&gt; Hello    World

</code></pre>

<h1 id="escape-charatcers">Escape Charatcers</h1>

<p>To insert characters that are illegal in a string, use an escape character.An escape character is a backslash \ followed by the character you want to insert.</p>

<pre><code class="language-python3">
&gt;&gt;&gt; txt = "We are the so-called "Vikings" from the north."

  File "demo_string_escape_error.py", line 1
    txt = "We are the so-called "Vikings" from the north."
                                       ^
SyntaxError: invalid syntax

</code></pre>

<p>To fix this problem, use the escape character ":</p>

<pre><code class="language-python3">&gt;&gt;&gt; txt = "We are the so-called \"Vikings\" from the north."
&gt;&gt;&gt; print(txt)
We are the so-called "Vikings" from the north.
</code></pre>

<table>
  <thead>
    <tr>
      <th>Code</th>
      <th>Result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>'</td>
      <td>Single Quote</td>
    </tr>
    <tr>
      <td>\\</td>
      <td>Backslash</td>
    </tr>
    <tr>
      <td>\n</td>
      <td>New Line</td>
    </tr>
    <tr>
      <td>\r</td>
      <td>Carriage Return</td>
    </tr>
    <tr>
      <td>\t</td>
      <td>Tab</td>
    </tr>
    <tr>
      <td>\b</td>
      <td>Backspace</td>
    </tr>
    <tr>
      <td>\f</td>
      <td>Form Feed</td>
    </tr>
    <tr>
      <td>\ooo</td>
      <td>Octal value</td>
    </tr>
    <tr>
      <td>\xhh</td>
      <td>Hex value</td>
    </tr>
  </tbody>
</table>

<h1 id="string-methods">string methods</h1>

<p>Python has a set of built-in methods that you can use on strings.</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">upper()</code> method returns the string in upper case:</li>
</ul>

<pre><code class="language-python3">
a = "Hello, World!"
print(a.upper())

HELLO,WORLD
</code></pre>

<p>The lower() method returns the string in lower case:</p>

<pre><code class="language-python3">
a = "Hello, World!"
print(a.lower())

hello,world

</code></pre>

<ul>
  <li>The strip() method removes any whitespace from the beginning or the end:</li>
</ul>

<pre><code class="language-python3">
a = " Hello, World! "
print(a.strip())

HELLO,WORLD
</code></pre>

<ul>
  <li>The replace() method replaces a string with another string</li>
</ul>

<pre><code class="language-python3">
a = "Hello, World!"
print(a.replace("H", "J"))

Jello, World!

</code></pre>

<p><a href="https://docs.python.org/3/library/string.html">More String Methods</a></p>

<p><a href="#">Top</a></p>

<p><a href="/python_beginner">Back</a></p>
:ET