I"®<table>&lt;/&gt;

Operators are special symbols in Python that carry out arithmetic or logical computation. The value that the operator operates is called the operand.

Python divides the operators in the following groups:

- Arithmetic operators

- Assignment operators

- Comparison operators

- Logical operators

- Identity operators

- Membership operators

- Bitwise operators

# Arithmetic operators

| Operator | Name           | Example  |
| -------- | -------------- | -------- |
| +        | Addition       | x + y    |
| -------- | ----           | -------  |
| -        | Subtraction    | x - y    |
| -------- | ----           | -------  |
| \*       | Multiplication | x \* y   |
| -------- | -------------- | -------- |
| /        | Division       | x / y    |
| -------- | ----           | -------  |
| %        | Modulus        | x % y    |
| -------- | ----           | -------  |
| \*\*     | Exponentiation | x \*\* y |
| -------- | ----           | -------  |
| //       | Floor division | x // y   |
| -------- | ----           | -------  |

---

```python3
x = 15
y = 4

# Output: x + y = 19
print('x + y =',x+y)

# Output: x - y = 11
print('x - y =',x-y)

# Output: x * y = 60
print('x * y =',x*y)

# Output: x / y = 3.75
print('x / y =',x/y)

# Output: x // y = 3
print('x // y =',x//y)

# Output: x ** y = 50625
print('x ** y =',x**y)
```

# Assignment Operators

| Operator | password                |
| -------- | ----------------------- |
| =        | x = 5                   |
| -------- | ----------------------- |
| +=       | x += 3                  |
| -------- | ----------------------- |
| -=       | x -= 3                  |
| -------- | ----------------------- |
| \_=      | x \_= 3                 |
| -------- | ----------------------- |
| /=       | x /= 3                  |
| -------- | ----------------------- |
| %=       | x %= 3                  |
| -------- | ----------------------- |
| //=      | x //= 3                 |
| -------- | ----------------------- |
| \*\*=    | x \*\*= 3               |
| -------- | ----------------------- |
| &amp;=       | x &amp;= 3                  |
| -------- | ----------------------- |
| \|=      | x\| = 3                 |
| -------- | ----------------------- |
| ^=       | x ^= 3                  |
| -------- | ----------------------- |
| &gt;&gt;=      | x &gt;&gt;= 3                 |
| ---      | --------                |
| &lt;&lt;=      | x &lt;&lt;= 3                 |
| ---      | --------                |

---

# Comparison Operators

| Operator | Name                     | Example |
| -------- | ------------------------ | ------- |
| ==       | Equal                    | x == y  |
| -------- | ---------                | ------- |
| !=       | Not equal                | x != y  |
| -------- | ---------                | ------- |
| &gt;        | Greater than             | x &gt; y   |
| -------- | ---------                | ------- |
| &gt; &lt;      | Less than                | x &lt; y   |
| -------- | ---------                | ------- |
| &gt; =      | Greater than or equal to | x &gt;= y  |
| -------- | ---------                | ------- |
| &gt; &lt;=     | Less than or equal to    | x &lt;=    |
| -------- | ---------                | ------- |

---

# Logical Operators

| Operator | Description                                             | Example               |
| -------- | ------------------------------------------------------- | --------------------- |
| and      | Returns True if both statements are true                | x &lt; 5 and x &lt; 10      |
| or       | Returns True if one of the statements is true           | x &lt; 5 or x &lt; 4        |
| not      | Reverse the result, returns False if the result is true | not(x &lt; 5 and x &lt; 10) |

---

# Membership Operators

| Operator | Description                                                                      | Example    |
| -------- | -------------------------------------------------------------------------------- | ---------- |
| in       | Returns True if a sequence with the specified value is present in the object     | x in y     |
| ---      | ---                                                                              |
| not in   | Returns True if a sequence with the specified value is not present in the object | x not in y |

---

# Bitwise Operators

| Operator | Name                 | Description                                                                                             |
| -------- | -------------------- | ------------------------------------------------------------------------------------------------------- |
| &amp;        | AND                  | Sets each bit to 1 if both bits are 1                                                                   |
| \|       | OR                   | Sets each bit to 1 if one of two bits is 1                                                              |
| ^        | XOR                  | Sets each bit to 1 if only one of two bits is 1                                                         |
| ~        | NOT                  | Inverts all the bits                                                                                    |
| &lt;&lt;       | Zero fill left shift | Shift left by pushing zeros in from the right and let the leftmost bits fall off                        |
| &gt;&gt;       | Signed right shift   | Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off |

---
</table>
:ET