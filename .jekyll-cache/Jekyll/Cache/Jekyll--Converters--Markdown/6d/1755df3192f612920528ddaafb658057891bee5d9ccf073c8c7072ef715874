I"L<p>Python has many built-in exceptions that are raised when your program encounters an error (something in the program goes wrong). When these exceptions occur, the Python interpreter stops the current process and passes it to the calling process until it is handled. If not handled, the program will crash.</p>

<p>Error handling in python is mainly handled by <code class="language-plaintext highlighter-rouge">try</code>, <code class="language-plaintext highlighter-rouge">except</code> and <code class="language-plaintext highlighter-rouge">finally</code></p>

<ul>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">try</code> block lets you test a block of code for errors.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">except</code> block lets you handle the error.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">finally</code> block lets you execute code, regardless of the result of the <code class="language-plaintext highlighter-rouge">try</code> and <code class="language-plaintext highlighter-rouge">except</code> blocks.</p>
  </li>
</ul>

<pre><code class="language-python3">
#The try block will generate a NameError, because x is not defined:

try:
  print(x)
except:
  print("Variable x is not defined")

# ou

Variable x is not defined

</code></pre>
:ET